import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
def generate_russian_name():
    names = ["–ò–≤–∞–Ω", "–ê–ª–µ–∫—Å–µ–π", "–î–º–∏—Ç—Ä–∏–π", "–°–µ—Ä–≥–µ–π", "–ê–Ω–¥—Ä–µ–π"]
    surnames = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤"]
    return f"üë§ –ò–º—è: {random.choice(names)} {random.choice(surnames)}"

def generate_passport():
    series = random.randint(1000, 9999)
    number = random.randint(100000, 999999)
    return f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: –°–µ—Ä–∏—è {series}, –ù–æ–º–µ—Ä {number}"

def generate_phone():
    return f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"

def generate_address():
    cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
    streets = ["–õ–µ–Ω–∏–Ω–∞", "–ü—É—à–∫–∏–Ω–∞", "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ú–∏—Ä–∞"]
    return f"üè† –ê–¥—Ä–µ—Å: –≥. {random.choice(cities)}, —É–ª. {random.choice(streets)}, –¥. {random.randint(1, 100)}"

def generate_credit_card():
    card_number = ''.join([str(random.randint(0, 9)) for _ in range(16)])
    expiry_date = f"{random.randint(1, 12):02d}/{random.randint(23, 30)}"
    cvv = ''.join([str(random.randint(0, 9)) for _ in range(3)])
    return f"üí≥ –ö–∞—Ä—Ç–∞: –ù–æ–º–µ—Ä {card_number}, –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è {expiry_date}, CVV {cvv}"

def generate_business_name():
    types = ["–û–û–û", "–ò–ü", "–ê–û"]
    names = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–°—Ç—Ä–æ–π–∫–∞", "–¢–æ—Ä–≥–æ–≤–ª—è", "–£—Å–ª—É–≥–∏", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"]
    return f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {random.choice(types)} '{random.choice(names)}'"

def generate_company():
    industries = ["IT", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "–£—Å–ª—É–≥–∏", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"]
    names = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–°—Ç—Ä–æ–π–∫–∞", "–¢–æ—Ä–≥–æ–≤–ª—è", "–£—Å–ª—É–≥–∏", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"]
    cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
    streets = ["–õ–µ–Ω–∏–Ω–∞", "–ü—É—à–∫–∏–Ω–∞", "–ì–∞–≥–∞—Ä–∏–Ω–∞", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ú–∏—Ä–∞"]
    address = f"–≥. {random.choice(cities)}, —É–ª. {random.choice(streets)}, –¥. {random.randint(1, 100)}"
    return f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {random.choice(names)}, –û—Ç—Ä–∞—Å–ª—å: {random.choice(industries)}, –ê–¥—Ä–µ—Å: {address}"

def generate_business():
    ideas = ["–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ñ–µ–π–Ω—é", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã"]
    return f"üí° –ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è: {random.choice(ideas)}"

def generate_inn():
    return f"üìù –ò–ù–ù: {random.randint(1000000000, 9999999999)}"

def generate_snils():
    return f"üìù –°–ù–ò–õ–°: {random.randint(10000000000, 99999999999)}"

def generate_bank_account():
    return f"üè¶ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç: {random.randint(10000000000000000000, 99999999999999999999)}"

def generate_bic():
    return f"üè¶ –ë–ò–ö: {random.randint(100000000, 999999999)}"

def generate_kpp():
    return f"üìù –ö–ü–ü: {random.randint(100000000, 999999999)}"

def generate_okpo():
    return f"üìù –û–ö–ü–û: {random.randint(10000000, 99999999)}"

def generate_ogrn():
    return f"üìù –û–ì–†–ù: {random.randint(1000000000000, 9999999999999)}"

def generate_oktmo():
    return f"üìù –û–ö–¢–ú–û: {random.randint(10000000, 99999999)}"

def generate_okved():
    return f"üìù –û–ö–í–≠–î: {random.randint(10, 99)}.{random.randint(10, 99)}"

def generate_email():
    domains = ["gmail.com", "yandex.ru", "mail.ru"]
    return f"üìß Email: {random.choice(['user', 'admin', 'test'])}{random.randint(1, 100)}@{random.choice(domains)}"

def generate_password():
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*"
    return f"üîë –ü–∞—Ä–æ–ª—å: {''.join(random.choice(chars) for _ in range(12))}"

def generate_random_number():
    return f"üî¢ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random.randint(1, 1000)}"

def generate_lorem_ipsum():
    return "üìú Lorem ipsum dolor sit amet, consectetur adipiscing elit."

def generate_meme():
    memes = ["–°–º–µ—à–Ω–æ–π –º–µ–º 1", "–°–º–µ—à–Ω–æ–π –º–µ–º 2", "–°–º–µ—à–Ω–æ–π –º–µ–º 3"]
    return f"üòÇ –ú–µ–º: {random.choice(memes)}"

def generate_business_idea():
    ideas = ["–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ñ–µ–π–Ω—é", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã"]
    return f"üí° –ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è: {random.choice(ideas)}"

def generate_color_palette():
    colors = ["#FF5733", "#33FF57", "#3357FF", "#F1C40F", "#8E44AD"]
    return f"üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞: {', '.join(colors)}"

def generate_qr_code_data():
    return f"üì≤ QR-–∫–æ–¥: https://example.com/{random.randint(1000, 9999)}"

def generate_date():
    year = random.randint(2020, 2025)
    month = random.randint(1, 12)
    day = random.randint(1, 28)
    return f"üìÖ –î–∞—Ç–∞: {day:02d}.{month:02d}.{year}"

def generate_math_problem():
    a = random.randint(1, 100)
    b = random.randint(1, 100)
    return f"üßÆ –ó–∞–¥–∞—á–∞: {a} + {b} = ?"

def generate_joke():
    jokes = ["–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –±–∞–≥–∏!", "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π? –¢–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–∏—à–µ—à—å!"]
    return f"üòÇ –®—É—Ç–∫–∞: {random.choice(jokes)}"

def generate_quote():
    quotes = ["–í—Å—ë, —á—Ç–æ –Ω–µ —É–±–∏–≤–∞–µ—Ç, –¥–µ–ª–∞–µ—Ç –Ω–∞—Å —Å–∏–ª—å–Ω–µ–µ.", "–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π."]
    return f"üìú –¶–∏—Ç–∞—Ç–∞: {random.choice(quotes)}"

def generate_to_do_list():
    tasks = ["–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É", "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É"]
    return f"üìù –°–ø–∏—Å–æ–∫ –¥–µ–ª:\n" + "\n".join(tasks)

def generate_nickname():
    nicknames = ["–ö–∏–±–µ—Ä–≤–æ–∏–Ω", "–¢—ë–º–Ω—ã–π –ª–æ—Ä–¥", "–°–≤–µ—Ç–ª—ã–π –∞–Ω–≥–µ–ª"]
    return f"üë§ –ù–∏–∫–Ω–µ–π–º: {random.choice(nicknames)}"

def generate_recipe():
    recipes = ["–°–ø–∞–≥–µ—Ç—Ç–∏ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", "–ü–µ–ª—å–º–µ–Ω–∏", "–ë–æ—Ä—â"]
    return f"üç≤ –†–µ—Ü–µ–ø—Ç: {random.choice(recipes)}"

def generate_route():
    routes = ["–ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å ‚Üí –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ ‚Üí –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
    return f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {random.choice(routes)}"

def generate_fact():
    facts = ["–ó–µ–º–ª—è ‚Äî —Ç—Ä–µ—Ç—å—è –ø–ª–∞–Ω–µ—Ç–∞ –æ—Ç –°–æ–ª–Ω—Ü–∞.", "–í–µ–Ω–µ—Ä–∞ ‚Äî —Å–∞–º–∞—è –≥–æ—Ä—è—á–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ."]
    return f"üìö –§–∞–∫—Ç: {random.choice(facts)}"

def generate_personality():
    traits = ["–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç", "–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç", "–ê–º–±–∏–≤–µ—Ä—Ç"]
    hobbies = ["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö–∏–Ω–æ", "–ö–Ω–∏–≥–∏", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"]
    return f"üß† –õ–∏—á–Ω–æ—Å—Ç—å: {random.choice(traits)}, –£–≤–ª–µ—á–µ–Ω–∏—è: {random.choice(hobbies)}"

def generate_car():
    brands = ["Toyota", "BMW", "Audi", "Mercedes", "Ford"]
    models = ["Corolla", "X5", "A4", "C-Class", "Mustang"]
    return f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {random.choice(brands)} {random.choice(models)}"

def generate_pet():
    pets = ["–°–æ–±–∞–∫–∞", "–ö–æ—à–∫–∞", "–ü–æ–ø—É–≥–∞–π", "–•–æ–º—è–∫", "–†—ã–±–∫–∞"]
    names = ["–ë–æ–±–∏–∫", "–ú—É—Ä–∑–∏–∫", "–ö–µ—à–∞", "–•–æ–º–∞", "–ù–µ–º–æ"]
    return f"üêæ –î–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {random.choice(pets)}, –ò–º—è: {random.choice(names)}"

def generate_job():
    jobs = ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–í—Ä–∞—á", "–£—á–∏—Ç–µ–ª—å", "–ò–Ω–∂–µ–Ω–µ—Ä", "–î–∏–∑–∞–π–Ω–µ—Ä"]
    companies = ["Google", "–Ø–Ω–¥–µ–∫—Å", "Microsoft", "–°–±–µ—Ä–±–∞–Ω–∫", "–†–æ—Å—Ç–µ—Ö"]
    return f"üíº –†–∞–±–æ—Ç–∞: {random.choice(jobs)}, –ö–æ–º–ø–∞–Ω–∏—è: {random.choice(companies)}"

def generate_university():
    universities = ["–ú–ì–£", "–°–ü–±–ì–£", "–ú–§–¢–ò", "–í–®–≠", "–ú–ì–¢–£"]
    faculties = ["–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏", "–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏", "–§–∞–∫—É–ª—å—Ç–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—ã", "–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏", "–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–∏–∑–∞–π–Ω–∞"]
    return f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {random.choice(universities)}, –§–∞–∫—É–ª—å—Ç–µ—Ç: {random.choice(faculties)}"

def generate_country():
    countries = ["–†–æ—Å—Å–∏—è", "–°–®–ê", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ö–∏—Ç–∞–π", "–Ø–ø–æ–Ω–∏—è"]
    capitals = ["–ú–æ—Å–∫–≤–∞", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–µ–∫–∏–Ω", "–¢–æ–∫–∏–æ"]
    return f"üåç –°—Ç—Ä–∞–Ω–∞: {random.choice(countries)}, –°—Ç–æ–ª–∏—Ü–∞: {random.choice(capitals)}"

def generate_city():
    cities = ["–ú–æ—Å–∫–≤–∞", "–ù—å—é-–ô–æ—Ä–∫", "–ë–µ—Ä–ª–∏–Ω", "–ü–µ–∫–∏–Ω", "–¢–æ–∫–∏–æ"]
    populations = ["12 –º–ª–Ω", "8 –º–ª–Ω", "3 –º–ª–Ω", "21 –º–ª–Ω", "13 –º–ª–Ω"]
    return f"üèôÔ∏è –ì–æ—Ä–æ–¥: {random.choice(cities)}, –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {random.choice(populations)}"

def generate_language():
    languages = ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ù–µ–º–µ—Ü–∫–∏–π", "–ö–∏—Ç–∞–π—Å–∫–∏–π", "–Ø–ø–æ–Ω—Å–∫–∏–π"]
    levels = ["–ù–∞—á–∞–ª—å–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"]
    return f"üó£Ô∏è –Ø–∑—ã–∫: {random.choice(languages)}, –£—Ä–æ–≤–µ–Ω—å: {random.choice(levels)}"

def generate_hobby():
    hobbies = ["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö–∏–Ω–æ", "–ö–Ω–∏–≥–∏", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"]
    return f"üé≠ –•–æ–±–±–∏: {random.choice(hobbies)}"

def generate_food():
    foods = ["–ü–∏—Ü—Ü–∞", "–°—É—à–∏", "–ë—É—Ä–≥–µ—Ä", "–ü–∞—Å—Ç–∞", "–°–∞–ª–∞—Ç"]
    return f"üçï –ï–¥–∞: {random.choice(foods)}"

def generate_drink():
    drinks = ["–ö–æ—Ñ–µ", "–ß–∞–π", "–°–æ–∫", "–í–æ–¥–∞", "–ö–æ–ª–∞"]
    return f"üçπ –ù–∞–ø–∏—Ç–æ–∫: {random.choice(drinks)}"

def generate_movie():
    movies = ["–ú–∞—Ç—Ä–∏—Ü–∞", "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü", "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã", "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "–ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è"]
    return f"üé¨ –§–∏–ª—å–º: {random.choice(movies)}"

def generate_book():
    books = ["1984", "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü"]
    return f"üìö –ö–Ω–∏–≥–∞: {random.choice(books)}"

def generate_music():
    genres = ["–†–æ–∫", "–ü–æ–ø", "–î–∂–∞–∑", "–ö–ª–∞—Å—Å–∏–∫–∞", "–•–∏–ø-—Ö–æ–ø"]
    return f"üéµ –ú—É–∑—ã–∫–∞: {random.choice(genres)}"

def generate_sport():
    sports = ["–§—É—Ç–±–æ–ª", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–¢–µ–Ω–Ω–∏—Å", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–ë–µ–≥"]
    return f"‚öΩ –°–ø–æ—Ä—Ç: {random.choice(sports)}"

def generate_game():
    games = ["Dota 2", "CS:GO", "Minecraft", "Fortnite", "The Witcher 3"]
    return f"üéÆ –ò–≥—Ä–∞: {random.choice(games)}"

def generate_website():
    websites = ["Google", "YouTube", "Facebook", "Twitter", "Instagram"]
    return f"üåê –°–∞–π—Ç: {random.choice(websites)}"

def generate_app():
    apps = ["Telegram", "WhatsApp", "Instagram", "YouTube", "Spotify"]
    return f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {random.choice(apps)}"

def generate_os():
    os_list = ["Windows", "macOS", "Linux", "Android", "iOS"]
    return f"üíª –û–°: {random.choice(os_list)}"

def generate_programming_language():
    languages = ["Python", "Java", "C++", "JavaScript", "Go"]
    return f"üíª –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {random.choice(languages)}"

def generate_currency():
    currencies = ["–†—É–±–ª—å", "–î–æ–ª–ª–∞—Ä", "–ï–≤—Ä–æ", "–§—É–Ω—Ç", "–ô–µ–Ω–∞"]
    return f"üí∞ –í–∞–ª—é—Ç–∞: {random.choice(currencies)}"

def generate_stock():
    stocks = ["Apple", "Google", "Tesla", "Amazon", "Microsoft"]
    return f"üìà –ê–∫—Ü–∏—è: {random.choice(stocks)}"

def generate_crypto():
    cryptos = ["Bitcoin", "Ethereum", "Litecoin", "Ripple", "Dogecoin"]
    return f"üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {random.choice(cryptos)}"

def generate_weather():
    weathers = ["–°–æ–ª–Ω–µ—á–Ω–æ", "–î–æ–∂–¥—å", "–°–Ω–µ–≥", "–û–±–ª–∞—á–Ω–æ", "–¢—É–º–∞–Ω"]
    return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {random.choice(weathers)}"

def generate_season():
    seasons = ["–ó–∏–º–∞", "–í–µ—Å–Ω–∞", "–õ–µ—Ç–æ", "–û—Å–µ–Ω—å"]
    return f"üçÇ –°–µ–∑–æ–Ω: {random.choice(seasons)}"

def generate_time():
    hour = random.randint(0, 23)
    minute = random.randint(0, 59)
    return f"‚è∞ –í—Ä–µ–º—è: {hour:02d}:{minute:02d}"

def generate_emoji():
    emojis = ["üòÄ", "üòé", "ü§î", "üòç", "ü§Ø"]
    return f"üòÄ –≠–º–æ–¥–∑–∏: {random.choice(emojis)}"

def generate_hashtag():
    hashtags = ["#–ª—é–±–æ–≤—å", "#–∂–∏–∑–Ω—å", "#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "#–µ–¥–∞", "#—Å–ø–æ—Ä—Ç"]
    return f"#Ô∏è‚É£ –•—ç—à—Ç–µ–≥: {random.choice(hashtags)}"

def generate_quote_of_the_day():
    quotes = ["–í—Å—ë, —á—Ç–æ –Ω–µ —É–±–∏–≤–∞–µ—Ç, –¥–µ–ª–∞–µ—Ç –Ω–∞—Å —Å–∏–ª—å–Ω–µ–µ.", "–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π.", "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã."]
    return f"üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: {random.choice(quotes)}"

def generate_fact_of_the_day():
    facts = ["–ó–µ–º–ª—è ‚Äî —Ç—Ä–µ—Ç—å—è –ø–ª–∞–Ω–µ—Ç–∞ –æ—Ç –°–æ–ª–Ω—Ü–∞.", "–í–µ–Ω–µ—Ä–∞ ‚Äî —Å–∞–º–∞—è –≥–æ—Ä—è—á–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.", "–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ ‚Äî –ê–º–∞–∑–æ–Ω–∫–∞."]
    return f"üìö –§–∞–∫—Ç –¥–Ω—è: {random.choice(facts)}"

def generate_joke_of_the_day():
    jokes = ["–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –±–∞–≥–∏!", "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π? –¢–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–∏—à–µ—à—å!"]
    return f"üòÇ –®—É—Ç–∫–∞ –¥–Ω—è: {random.choice(jokes)}"

def generate_tip_of_the_day():
    tips = ["–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.", "–†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ä–∞–±–æ—Ç–µ.", "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."]
    return f"üí° –°–æ–≤–µ—Ç –¥–Ω—è: {random.choice(tips)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext):
    keyboard = [
        ["üë§ –ò–º—è", "üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üì± –¢–µ–ª–µ—Ñ–æ–Ω"],
        ["üè† –ê–¥—Ä–µ—Å", "üí≥ –ö–∞—Ä—Ç–∞", "üè¢ –ö–æ–º–ø–∞–Ω–∏—è"],
        ["üí° –ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è", "üìù –ò–ù–ù", "üìù –°–ù–ò–õ–°"],
        ["üè¶ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", "üè¶ –ë–ò–ö", "üìù –ö–ü–ü"],
        ["üìù –û–ö–ü–û", "üìù –û–ì–†–ù", "üìù –û–ö–¢–ú–û"],
        ["üìù –û–ö–í–≠–î", "üìß Email", "üîë –ü–∞—Ä–æ–ª—å"],
        ["üî¢ –ß–∏—Å–ª–æ", "üìú –¢–µ–∫—Å—Ç", "üòÇ –ú–µ–º"],
        ["üé® –¶–≤–µ—Ç–∞", "üì≤ QR-–∫–æ–¥", "üìÖ –î–∞—Ç–∞"],
        ["üßÆ –ó–∞–¥–∞—á–∞", "üòÇ –®—É—Ç–∫–∞", "üìú –¶–∏—Ç–∞—Ç–∞"],
        ["üìù –°–ø–∏—Å–æ–∫ –¥–µ–ª", "üë§ –ù–∏–∫–Ω–µ–π–º", "üç≤ –†–µ—Ü–µ–ø—Ç"],
        ["üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç", "üìö –§–∞–∫—Ç", "üß† –õ–∏—á–Ω–æ—Å—Ç—å"],
        ["üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å", "üêæ –î–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ", "üíº –†–∞–±–æ—Ç–∞"],
        ["üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "üåç –°—Ç—Ä–∞–Ω–∞", "üèôÔ∏è –ì–æ—Ä–æ–¥"],
        ["üó£Ô∏è –Ø–∑—ã–∫", "üé≠ –•–æ–±–±–∏", "üçï –ï–¥–∞"],
        ["üçπ –ù–∞–ø–∏—Ç–æ–∫", "üé¨ –§–∏–ª—å–º", "üìö –ö–Ω–∏–≥–∞"],
        ["üéµ –ú—É–∑—ã–∫–∞", "‚öΩ –°–ø–æ—Ä—Ç", "üéÆ –ò–≥—Ä–∞"],
        ["üåê –°–∞–π—Ç", "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "üíª –û–°"],
        ["üíª –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "üí∞ –í–∞–ª—é—Ç–∞", "üìà –ê–∫—Ü–∏—è"],
        ["üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üçÇ –°–µ–∑–æ–Ω"],
        ["‚è∞ –í—Ä–µ–º—è", "üòÄ –≠–º–æ–¥–∑–∏", "#Ô∏è‚É£ –•—ç—à—Ç–µ–≥"],
        ["üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", "üìö –§–∞–∫—Ç –¥–Ω—è", "üòÇ –®—É—Ç–∫–∞ –¥–Ω—è"],
        ["üí° –°–æ–≤–µ—Ç –¥–Ω—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:", reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üë§ –ò–º—è":
        update.message.reply_text(generate_russian_name())
    elif text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        update.message.reply_text(generate_passport())
    elif text == "üì± –¢–µ–ª–µ—Ñ–æ–Ω":
        update.message.reply_text(generate_phone())
    elif text == "üè† –ê–¥—Ä–µ—Å":
        update.message.reply_text(generate_address())
    elif text == "üí≥ –ö–∞—Ä—Ç–∞":
        update.message.reply_text(generate_credit_card())
    elif text == "üè¢ –ö–æ–º–ø–∞–Ω–∏—è":
        update.message.reply_text(generate_company())
    elif text == "üí° –ë–∏–∑–Ω–µ—Å-–∏–¥–µ—è":
        update.message.reply_text(generate_business())
    elif text == "üìù –ò–ù–ù":
        update.message.reply_text(generate_inn())
    elif text == "üìù –°–ù–ò–õ–°":
        update.message.reply_text(generate_snils())
    elif text == "üè¶ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç":
        update.message.reply_text(generate_bank_account())
    elif text == "üè¶ –ë–ò–ö":
        update.message.reply_text(generate_bic())
    elif text == "üìù –ö–ü–ü":
        update.message.reply_text(generate_kpp())
    elif text == "üìù –û–ö–ü–û":
        update.message.reply_text(generate_okpo())
    elif text == "üìù –û–ì–†–ù":
        update.message.reply_text(generate_ogrn())
    elif text == "üìù –û–ö–¢–ú–û":
        update.message.reply_text(generate_oktmo())
    elif text == "üìù –û–ö–í–≠–î":
        update.message.reply_text(generate_okved())
    elif text == "üìß Email":
        update.message.reply_text(generate_email())
    elif text == "üîë –ü–∞—Ä–æ–ª—å":
        update.message.reply_text(generate_password())
    elif text == "üî¢ –ß–∏—Å–ª–æ":
        update.message.reply_text(generate_random_number())
    elif text == "üìú –¢–µ–∫—Å—Ç":
        update.message.reply_text(generate_lorem_ipsum())
    elif text == "üòÇ –ú–µ–º":
        update.message.reply_text(generate_meme())
    elif text == "üé® –¶–≤–µ—Ç–∞":
        update.message.reply_text(generate_color_palette())
    elif text == "üì≤ QR-–∫–æ–¥":
        update.message.reply_text(generate_qr_code_data())
    elif text == "üìÖ –î–∞—Ç–∞":
        update.message.reply_text(generate_date())
    elif text == "üßÆ –ó–∞–¥–∞—á–∞":
        update.message.reply_text(generate_math_problem())
    elif text == "üòÇ –®—É—Ç–∫–∞":
        update.message.reply_text(generate_joke())
    elif text == "üìú –¶–∏—Ç–∞—Ç–∞":
        update.message.reply_text(generate_quote())
    elif text == "üìù –°–ø–∏—Å–æ–∫ –¥–µ–ª":
        update.message.reply_text(generate_to_do_list())
    elif text == "üë§ –ù–∏–∫–Ω–µ–π–º":
        update.message.reply_text(generate_nickname())
    elif text == "üç≤ –†–µ—Ü–µ–ø—Ç":
        update.message.reply_text(generate_recipe())
    elif text == "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç":
        update.message.reply_text(generate_route())
    elif text == "üìö –§–∞–∫—Ç":
        update.message.reply_text(generate_fact())
    elif text == "üß† –õ–∏—á–Ω–æ—Å—Ç—å":
        update.message.reply_text(generate_personality())
    elif text == "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å":
        update.message.reply_text(generate_car())
    elif text == "üêæ –î–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ":
        update.message.reply_text(generate_pet())
    elif text == "üíº –†–∞–±–æ—Ç–∞":
        update.message.reply_text(generate_job())
    elif text == "üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç":
        update.message.reply_text(generate_university())
    elif text == "üåç –°—Ç—Ä–∞–Ω–∞":
        update.message.reply_text(generate_country())
    elif text == "üèôÔ∏è –ì–æ—Ä–æ–¥":
        update.message.reply_text(generate_city())
    elif text == "üó£Ô∏è –Ø–∑—ã–∫":
        update.message.reply_text(generate_language())
    elif text == "üé≠ –•–æ–±–±–∏":
        update.message.reply_text(generate_hobby())
    elif text == "üçï –ï–¥–∞":
        update.message.reply_text(generate_food())
    elif text == "üçπ –ù–∞–ø–∏—Ç–æ–∫":
        update.message.reply_text(generate_drink())
    elif text == "üé¨ –§–∏–ª—å–º":
        update.message.reply_text(generate_movie())
    elif text == "üìö –ö–Ω–∏–≥–∞":
        update.message.reply_text(generate_book())
    elif text == "üéµ –ú—É–∑—ã–∫–∞":
        update.message.reply_text(generate_music())
    elif text == "‚öΩ –°–ø–æ—Ä—Ç":
        update.message.reply_text(generate_sport())
    elif text == "üéÆ –ò–≥—Ä–∞":
        update.message.reply_text(generate_game())
    elif text == "üåê –°–∞–π—Ç":
        update.message.reply_text(generate_website())
    elif text == "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        update.message.reply_text(generate_app())
    elif text == "üíª –û–°":
        update.message.reply_text(generate_os())
    elif text == "üíª –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è":
        update.message.reply_text(generate_programming_language())
    elif text == "üí∞ –í–∞–ª—é—Ç–∞":
        update.message.reply_text(generate_currency())
    elif text == "üìà –ê–∫—Ü–∏—è":
        update.message.reply_text(generate_stock())
    elif text == "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        update.message.reply_text(generate_crypto())
    elif text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞":
        update.message.reply_text(generate_weather())
    elif text == "üçÇ –°–µ–∑–æ–Ω":
        update.message.reply_text(generate_season())
    elif text == "‚è∞ –í—Ä–µ–º—è":
        update.message.reply_text(generate_time())
    elif text == "üòÄ –≠–º–æ–¥–∑–∏":
        update.message.reply_text(generate_emoji())
    elif text == "#Ô∏è‚É£ –•—ç—à—Ç–µ–≥":
        update.message.reply_text(generate_hashtag())
    elif text == "üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è":
        update.message.reply_text(generate_quote_of_the_day())
    elif text == "üìö –§–∞–∫—Ç –¥–Ω—è":
        update.message.reply_text(generate_fact_of_the_day())
    elif text == "üòÇ –®—É—Ç–∫–∞ –¥–Ω—è":
        update.message.reply_text(generate_joke_of_the_day())
    elif text == "üí° –°–æ–≤–µ—Ç –¥–Ω—è":
        update.message.reply_text(generate_tip_of_the_day())
    else:
        update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    token = "8029071480:AAHNH8DFZhcMXQshb5D7mLMyKYY5OfxQiyQ"
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
